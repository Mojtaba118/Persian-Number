{"version":3,"file":"persianNumber.min.js","names":["oneDigit","twoDigits","threeDigits","types","decimalTypes","numbers","decimals","convert","number","negative","decNumber","decimal","percent","isPercent","replace","getString","sliceNumber","isNegative","isDecimal","index","indexOf","decNumberStr","substr","length","parseInt","toString","calculateDigits","separator","arguments","neg","dNum","n","d","putSeparator","split","numString","result","i","counter","reverse","join","arrNum","b","Math","floor","parsedNum","sadgan","dahgan","yekan","getPersian","getType","trim","dahganPlusYekan","isNaN","string","lIndex","lastIndexOf","convertEnToPe","res","convertPeToEn","module","exports"],"sources":["../src/persianNumber.js"],"sourcesContent":["const oneDigit = [\r\n    \"صفر\",\r\n    \"یک\",\r\n    \"دو\",\r\n    \"سه\",\r\n    \"چهار\",\r\n    \"پنج\",\r\n    \"شش\",\r\n    \"هفت\",\r\n    \"هشت\",\r\n    \"نه\",\r\n];\r\nconst twoDigits = {\r\n    10: \"ده\",\r\n    11: \"یازده\",\r\n    12: \"دوازده\",\r\n    13: \"سیزده\",\r\n    14: \"چهارده\",\r\n    15: \"پانزده\",\r\n    16: \"شانزده\",\r\n    17: \"هفده\",\r\n    18: \"هجده\",\r\n    19: \"نوزده\",\r\n    20: \"بیست\",\r\n    30: \"سی\",\r\n    40: \"چهل\",\r\n    50: \"پنجاه\",\r\n    60: \"شصت\",\r\n    70: \"هفتاد\",\r\n    80: \"هشتاد\",\r\n    90: \"نود\",\r\n};\r\nconst threeDigits = {\r\n    100: \"صد\",\r\n    200: \"دویست\",\r\n    300: \"سیصد\",\r\n    400: \"چهارصد\",\r\n    500: \"پانصد\",\r\n    600: \"شش صد\",\r\n    700: \"هفت صد\",\r\n    800: \"هشت صد\",\r\n    900: \"نه صد\",\r\n};\r\n\r\nconst types = [\r\n    \"سپتیلیارد\",\r\n    \"سپتیلیون\",\r\n    \"سکستیلیارد\",\r\n    \"سکستیلیون\",\r\n    \"کوانتینیارد\",\r\n    \"کوینتیلیون\",\r\n    \"کادریلیارد\",\r\n    \"کوآدریلیون\",\r\n    \"تریلیارد\",\r\n    \"تریلیون\",\r\n    \"بیلیارد\",\r\n    \"بیلیون\",\r\n    \"میلیارد\",\r\n    \"میلیون\",\r\n    \"هزار\",\r\n    \"\",\r\n];\r\nconst decimalTypes = [\"دهم\", \"صدم\", \"هزارم\", \"ده هزارم\"];\r\nlet numbers = [];\r\nlet decimals = [];\r\n\r\n//Convert Number To Words\r\nconst convert = (number) => {\r\n    let negative = \"\";\r\n    let decNumber = \"\";\r\n    let decimal = \"\";\r\n    let percent = \"\";\r\n\r\n    if (isPercent(number)) {\r\n        number = number.replace(\"%\", \"\");\r\n        percent = \" درصد\";\r\n    }\r\n\r\n    number = getString(number);\r\n    if (number == \"\") return \"\";\r\n    sliceNumber(number);\r\n    if (isNegative(number)) negative = \"منفی \";\r\n    number = number.replace(\"-\", \"\");\r\n\r\n    if (isDecimal(number)) {\r\n        let index = number.indexOf(\".\");\r\n        let decNumberStr = \"\";\r\n\r\n        decNumber = number.substr(index + 1, number.length);\r\n        number = number.substr(0, index);\r\n        decNumberStr = parseInt(decNumber).toString();\r\n\r\n        if (decNumberStr.length === 1 && decNumberStr != \"0\") {\r\n            decimal += oneDigit[decNumberStr] + \" \";\r\n            decimal += decimalTypes[decNumber.length - 1];\r\n        } else {\r\n            decimal = calculateDigits(decimals);\r\n            decimal += \" \" + decimalTypes[decNumber.length - 1];\r\n        }\r\n    }\r\n\r\n    if (number.length === 1) {\r\n        if (!decimal) {\r\n            return negative + oneDigit[number] + percent;\r\n        }\r\n\r\n        if (number == \"0\") {\r\n            return negative + decimal + percent;\r\n        }\r\n\r\n        return negative + oneDigit[number] + \" ممیز \" + decimal + percent;\r\n    }\r\n\r\n    if (!decimal) {\r\n        return negative + calculateDigits(numbers) + percent;\r\n    }\r\n\r\n    return negative + calculateDigits(numbers) + \" ممیز \" + decimal + percent;\r\n};\r\n\r\n//split number 3 by 3 with a separator (123456789.3025=>123,456,789.3,025) Do Not Give It Persian Numbers\r\nconst sliceNumber = (number, separator = \",\") => {\r\n    let percent = \"\";\r\n    let neg = \"\";\r\n    let dNum = \"\";\r\n    let n = \"\";\r\n    let d = \"\";\r\n\r\n    if (isPercent(number)) {\r\n        number = number.replace(\"%\", \"\");\r\n        percent = \"%\";\r\n    }\r\n\r\n    number = getString(number);\r\n\r\n    if (number == \"\") return \"\";\r\n    if (isNegative(number)) neg = \"-\";\r\n\r\n    number = number.replace(\"-\", \"\");\r\n\r\n    if (isDecimal(number)) {\r\n        let index = number.indexOf(\".\");\r\n        dNum = number.substr(index + 1, number.length);\r\n        number = number.substr(0, index);\r\n    }\r\n\r\n    n = putSeparator(number, separator);\r\n    numbers = n.split(separator);\r\n\r\n    if (!dNum) return neg + n + percent;\r\n\r\n    d = putSeparator(dNum, separator);\r\n    decimals = d.split(separator);\r\n\r\n    return neg + n + \".\" + d + percent;\r\n};\r\n\r\n//Puts a separator between the chunks of the given numString.\r\nconst putSeparator = (numString, separator = \",\") => {\r\n    if (typeof numString !== \"string\") return \"\";\r\n    if (numString.length < 4) return numString;\r\n\r\n    let result = \"\";\r\n    for (let i = numString.length - 1, counter = 0; i >= 0; i--) {\r\n        if (counter == 3) {\r\n            result += separator;\r\n            counter = 0;\r\n        }\r\n        result += numString[i];\r\n        counter++;\r\n    }\r\n\r\n    result = result.split(\"\").reverse().join(\"\");\r\n    return result;\r\n};\r\n\r\n//Processing on Digits of A Number\r\nconst calculateDigits = (arrNum) => {\r\n    let result = \"\";\r\n    for (let i = 0; i < arrNum.length; i++) {\r\n        let parsedNum = parseInt(arrNum[i]);\r\n        let number = parsedNum;\r\n        let sadgan = Math.floor(number / 100) * 100;\r\n        number = number % 100;\r\n        let dahgan = Math.floor(number / 10) * 10;\r\n        let yekan = number % 10;\r\n        result += i !== 0 && parsedNum ? \" و \" : \"\";\r\n\r\n        result +=\r\n            getPersian(sadgan, dahgan, yekan, i, arrNum) +\r\n            \" \" +\r\n            getType(i, arrNum);\r\n    }\r\n\r\n    return result.trim();\r\n};\r\n\r\n//Main Process That Turn a Number Into a String(122=>100+20+2)\r\nconst getPersian = (sadgan, dahgan, yekan, index, numbers) => {\r\n    let flag = false;\r\n    let result = \"\";\r\n    let dahganPlusYekan = dahgan + yekan;\r\n\r\n    if (threeDigits[sadgan]) {\r\n        result +=\r\n            yekan > 0 || dahgan > 0\r\n                ? threeDigits[sadgan] + \" و \"\r\n                : threeDigits[sadgan];\r\n    }\r\n\r\n    if (twoDigits[dahganPlusYekan]) {\r\n        result += twoDigits[dahganPlusYekan] + \" \";\r\n        return result;\r\n    }\r\n\r\n    if (twoDigits[dahgan]) {\r\n        result += twoDigits[dahgan] + \" و \";\r\n    }\r\n\r\n    if (\r\n        numbers.length === 2 &&\r\n        index === 0 &&\r\n        yekan === 1 &&\r\n        dahgan === 0 &&\r\n        sadgan === 0\r\n    ) {\r\n        return result;\r\n    }\r\n\r\n    if (\r\n        numbers.length > 2 &&\r\n        index === numbers.length - 2 &&\r\n        yekan === 1 &&\r\n        dahgan === 0 &&\r\n        sadgan === 0\r\n    ) {\r\n        return result;\r\n    }\r\n\r\n    if (yekan > 0) result += oneDigit[yekan] + \" \";\r\n\r\n    return result;\r\n};\r\n\r\n//getting The Type Of Each Number (Billion, Million,...)\r\nconst getType = (i, numbers) => {\r\n    let parsedNum = parseInt(numbers[i]);\r\n    if (isNaN(parsedNum)) return \"\";\r\n    if (!parsedNum) return \"\";\r\n    let length = numbers.length - i;\r\n    let index = types.length - length;\r\n    return types[index];\r\n};\r\n\r\n//Calculate if number:String is Negative Or Not\r\nconst isNegative = (number) => {\r\n    number = getString(number);\r\n    if (!number) return false;\r\n    if (number[0] != \"-\") return false;\r\n    number = number.replace(\"-\", \"\");\r\n    return number != \"0\";\r\n};\r\n\r\n//Calculate if number:String has '%' as Percent\r\nconst isPercent = (string) => {\r\n    if (typeof string !== \"string\") return false;\r\n    let index = string.indexOf(\"%\");\r\n    let lIndex = string.lastIndexOf(\"%\");\r\n    if (index != lIndex) return false;\r\n    return index > 0;\r\n};\r\n\r\n//is number:String:Number is a Valid Number? if type is Number turn it to String And Return it\r\nconst getString = (number) => {\r\n    if (number === undefined) return \"\";\r\n    if (number === null) return \"\";\r\n    if (isNaN(number)) return \"\";\r\n    if (typeof number === \"number\") return number.toString();\r\n    return number.trim();\r\n};\r\n\r\n//Calculate if number:String has Decimal Point Or Not\r\nconst isDecimal = (number) => {\r\n    number = getString(number);\r\n    if (number == \"\") return false;\r\n    let index = number.indexOf(\".\");\r\n    let lIndex = number.lastIndexOf(\".\");\r\n    if (index != lIndex) return false;\r\n    return index > 0;\r\n};\r\n//Convert English Numbers To Persian Numbers\r\nconst convertEnToPe = (number) => {\r\n    if (number == null || number == undefined) return \"\";\r\n    if (typeof number == \"number\") number = number.toString();\r\n    let res = \"\";\r\n    for (let i = 0; i < number.length; i++) {\r\n        switch (number[i]) {\r\n            case \"\\u0030\":\r\n                res += \"\\u06F0\";\r\n                break;\r\n            case \"\\u0031\":\r\n                res += \"\\u06F1\";\r\n                break;\r\n            case \"\\u0032\":\r\n                res += \"\\u06F2\";\r\n                break;\r\n            case \"\\u0033\":\r\n                res += \"\\u06F3\";\r\n                break;\r\n            case \"\\u0034\":\r\n                res += \"\\u06F4\";\r\n                break;\r\n            case \"\\u0035\":\r\n                res += \"\\u06F5\";\r\n                break;\r\n            case \"\\u0036\":\r\n                res += \"\\u06F6\";\r\n                break;\r\n            case \"\\u0037\":\r\n                res += \"\\u06F7\";\r\n                break;\r\n            case \"\\u0038\":\r\n                res += \"\\u06F8\";\r\n                break;\r\n            case \"\\u0039\":\r\n                res += \"\\u06F9\";\r\n                break;\r\n            default:\r\n                res += number[i];\r\n        }\r\n    }\r\n    return res;\r\n};\r\n//Convert Persian Numbers To English Numbers\r\nconst convertPeToEn = (number) => {\r\n    if (number == null || number == undefined) return \"\";\r\n    let res = \"\";\r\n    for (let i = 0; i < number.length; i++) {\r\n        switch (number[i]) {\r\n            case \"\\u06F0\":\r\n                res += \"\\u0030\";\r\n                break;\r\n            case \"\\u06F1\":\r\n                res += \"\\u0031\";\r\n                break;\r\n            case \"\\u06F2\":\r\n                res += \"\\u0032\";\r\n                break;\r\n            case \"\\u06F3\":\r\n                res += \"\\u0033\";\r\n                break;\r\n            case \"\\u06F4\":\r\n                res += \"\\u0034\";\r\n                break;\r\n            case \"\\u06F5\":\r\n                res += \"\\u0035\";\r\n                break;\r\n            case \"\\u06F6\":\r\n                res += \"\\u0036\";\r\n                break;\r\n            case \"\\u06F7\":\r\n                res += \"\\u0037\";\r\n                break;\r\n            case \"\\u06F8\":\r\n                res += \"\\u0038\";\r\n                break;\r\n            case \"\\u06F9\":\r\n                res += \"\\u0039\";\r\n                break;\r\n            default:\r\n                res += number[i];\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\r\nmodule.exports = exports = {\r\n    convert,\r\n    sliceNumber,\r\n    convertEnToPe,\r\n    convertPeToEn,\r\n};\r\n"],"mappings":"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","ignoreList":[]}
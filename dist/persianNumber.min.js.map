{"version":3,"sources":["../src/persianNumber.js"],"names":[],"mappings":"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","file":"persianNumber.min.js","sourcesContent":["const oneDigit = [\r\n  \"صفر\",\r\n  \"یک\",\r\n  \"دو\",\r\n  \"سه\",\r\n  \"چهار\",\r\n  \"پنج\",\r\n  \"شش\",\r\n  \"هفت\",\r\n  \"هشت\",\r\n  \"نه\"\r\n];\r\nconst twoDigits = {\r\n  10: \"ده\",\r\n  11: \"یازده\",\r\n  12: \"دوازده\",\r\n  13: \"سیزده\",\r\n  14: \"چهارده\",\r\n  15: \"پانزده\",\r\n  16: \"شانزده\",\r\n  17: \"هفده\",\r\n  18: \"هجده\",\r\n  19: \"نوزده\",\r\n  20: \"بیست\",\r\n  30: \"سی\",\r\n  40: \"چهل\",\r\n  50: \"پنجاه\",\r\n  60: \"شصت\",\r\n  70: \"هفتاد\",\r\n  80: \"هشتاد\",\r\n  90: \"نود\"\r\n};\r\nconst threeDigits = {\r\n  100: \"صد\",\r\n  200: \"دویست\",\r\n  300: \"سیصد\",\r\n  400: \"چهارصد\",\r\n  500: \"پانصد\",\r\n  600: \"شش صد\",\r\n  700: \"هفت صد\",\r\n  800: \"هشت صد\",\r\n  900: \"نه صد\"\r\n};\r\n\r\nconst types = [\"تلیارد\", \"میلیارد\", \"میلیون\", \"هزار\", \"\"];\r\nconst decimalTypes = [\"دهم\", \"صدم\", \"هزارم\", \"ده هزارم\"];\r\nlet numbers = [];\r\nlet decimals = [];\r\n\r\n//Convert Number To Words\r\nconst convert = number => {\r\n  let negative = \"\";\r\n  let decNumber = \"\";\r\n  let decimal = \"\";\r\n  let percent = \"\";\r\n\r\n  if (isPercent(number)) {\r\n    number = number.replace(\"%\", \"\");\r\n    percent = \" درصد\";\r\n  }\r\n\r\n  number = getString(number);\r\n  if (number == \"\") return \"\";\r\n  sliceNumber(number);\r\n  if (isNegative(number)) negative = \"منفی \";\r\n  number = number.replace(\"-\", \"\");\r\n\r\n  if (isDecimal(number)) {\r\n    let index = number.indexOf(\".\");\r\n    let decNumberStr = \"\";\r\n\r\n    decNumber = number.substr(index + 1, number.length);\r\n    number = number.substr(0, index);\r\n    decNumberStr = parseInt(decNumber).toString();\r\n\r\n    if (decNumberStr.length === 1 && decNumberStr != \"0\") {\r\n      decimal += oneDigit[decNumberStr] + \" \";\r\n      decimal += decimalTypes[decNumber.length - 1];\r\n    } else {\r\n      decimal = calculateDigits(decimals);\r\n      decimal += \" \" + decimalTypes[decNumber.length - 1];\r\n    }\r\n  }\r\n\r\n  if (number.length === 1) {\r\n    if (!decimal) {\r\n      return negative + oneDigit[number] + percent;\r\n    }\r\n\r\n    if (number == \"0\") {\r\n      return negative + decimal + percent;\r\n    }\r\n\r\n    return negative + oneDigit[number] + \" ممیز \" + decimal + percent;\r\n  }\r\n\r\n  if (!decimal) {\r\n    return negative + calculateDigits(numbers) + percent;\r\n  }\r\n\r\n  return negative + calculateDigits(numbers) + \" ممیز \" + decimal + percent;\r\n};\r\n\r\n//split number 3 by 3 with a separator (123456789.3025=>123,456,789.3,025) Do Not Give It Persian Numbers\r\nconst sliceNumber = (number, separator = \",\") => {\r\n  let percent = \"\";\r\n  let neg = \"\";\r\n  let dNum = \"\";\r\n  let n = \"\";\r\n  let d = \"\";\r\n\r\n  if (isPercent(number)) {\r\n    number = number.replace(\"%\", \"\");\r\n    percent = \"%\";\r\n  }\r\n\r\n  number = getString(number);\r\n\r\n  if (number == \"\") return \"\";\r\n  if (isNegative(number)) neg = \"-\";\r\n\r\n  number = number.replace(\"-\", \"\");\r\n\r\n  if (isDecimal(number)) {\r\n    let index = number.indexOf(\".\");\r\n    dNum = number.substr(index + 1, number.length);\r\n    number = number.substr(0, index);\r\n  }\r\n\r\n  n = putSeparator(number, separator);\r\n  numbers = n.split(separator);\r\n\r\n  if (!dNum) return neg + n + percent;\r\n\r\n  d = putSeparator(dNum, separator);\r\n  decimals = d.split(separator);\r\n\r\n  return neg + n + \".\" + d + percent;\r\n};\r\n\r\n//Puts a separator between the chunks of the given numString.\r\nconst putSeparator = (numString, separator = \",\") => {\r\n  if (typeof numString !== \"string\") return \"\";\r\n  if (numString.length < 4) return numString;\r\n\r\n  let result = \"\";\r\n  for (let i = numString.length - 1, counter = 0; i >= 0; i--) {\r\n    if (counter == 3) {\r\n      result += separator;\r\n      counter = 0;\r\n    }\r\n    result += numString[i];\r\n    counter++;\r\n  }\r\n\r\n  result = result\r\n    .split(\"\")\r\n    .reverse()\r\n    .join(\"\");\r\n  return result;\r\n};\r\n\r\n//Processing on Digits of A Number\r\nconst calculateDigits = arrNum => {\r\n  let result = \"\";\r\n  for (let i = 0; i < arrNum.length; i++) {\r\n    let parsedNum = parseInt(arrNum[i]);\r\n    let number = parsedNum;\r\n    let sadgan = Math.floor(number / 100) * 100;\r\n    number = number % 100;\r\n    let dahgan = Math.floor(number / 10) * 10;\r\n    let yekan = number % 10;\r\n    result += i !== 0 && parsedNum ? \" و \" : \"\";\r\n\r\n    result +=\r\n      getPersian(sadgan, dahgan, yekan, i, arrNum) + \" \" + getType(i, arrNum);\r\n  }\r\n\r\n  return result.trim();\r\n};\r\n\r\n//Main Process That Turn a Number Into a String(122=>100+20+2)\r\nconst getPersian = (sadgan, dahgan, yekan, index, numbers) => {\r\n  let flag = false;\r\n  let result = \"\";\r\n  let dahganPlusYekan = dahgan + yekan;\r\n\r\n  if (threeDigits[sadgan]) {\r\n    result +=\r\n      yekan > 0 || dahgan > 0\r\n        ? threeDigits[sadgan] + \" و \"\r\n        : threeDigits[sadgan];\r\n  }\r\n\r\n  if (twoDigits[dahganPlusYekan]) {\r\n    result += twoDigits[dahganPlusYekan] + \" \";\r\n    return result;\r\n  }\r\n\r\n  if (twoDigits[dahgan]) {\r\n    result += twoDigits[dahgan] + \" و \";\r\n  }\r\n\r\n  if (\r\n    numbers.length === 2 &&\r\n    index === 0 &&\r\n    yekan === 1 &&\r\n    dahgan === 0 &&\r\n    sadgan === 0\r\n  ) {\r\n    return result;\r\n  }\r\n\r\n  if (\r\n    numbers.length > 2 &&\r\n    index === numbers.length - 2 &&\r\n    yekan === 1 &&\r\n    dahgan === 0 &&\r\n    sadgan === 0\r\n  ) {\r\n    return result;\r\n  }\r\n\r\n  if (yekan > 0) result += oneDigit[yekan] + \" \";\r\n\r\n  return result;\r\n};\r\n\r\n//getting The Type Of Each Number (Billion, Million,...)\r\nconst getType = (i, numbers) => {\r\n  let parsedNum = parseInt(numbers[i]);\r\n  if (isNaN(parsedNum)) return \"\";\r\n  if (!parsedNum) return \"\";\r\n  let length = numbers.length - i;\r\n  let index = types.length - length;\r\n  return types[index];\r\n};\r\n\r\n//Calculate if number:String is Negative Or Not\r\nconst isNegative = number => {\r\n  number = getString(number);\r\n  if (!number) return false;\r\n  if (number[0] != \"-\") return false;\r\n  number = number.replace(\"-\", \"\");\r\n  return number != \"0\";\r\n};\r\n\r\n//Calculate if number:String has '%' as Percent\r\nconst isPercent = string => {\r\n  if (typeof string !== \"string\") return false;\r\n  let index = string.indexOf(\"%\");\r\n  let lIndex = string.lastIndexOf(\"%\");\r\n  if (index != lIndex) return false;\r\n  return index > 0;\r\n};\r\n\r\n//is number:String:Number is a Valid Number? if type is Number turn it to String And Return it\r\nconst getString = number => {\r\n  if (number === undefined) return \"\";\r\n  if (number === null) return \"\";\r\n  if (isNaN(number)) return \"\";\r\n  if (typeof number === \"number\") return number.toString();\r\n  return number.trim();\r\n};\r\n\r\n//Calculate if number:String has Decimal Point Or Not\r\nconst isDecimal = number => {\r\n  number = getString(number);\r\n  if (number == \"\") return false;\r\n  let index = number.indexOf(\".\");\r\n  let lIndex = number.lastIndexOf(\".\");\r\n  if (index != lIndex) return false;\r\n  return index > 0;\r\n};\r\n//Convert English Numbers To Persian Numbers\r\nconst convertEnToPe = number => {\r\n  if (number == null || number == undefined) return \"\";\r\n  if (typeof number == \"number\") number = number.toString();\r\n  let res = \"\";\r\n  for (let i = 0; i < number.length; i++) {\r\n    switch (number[i]) {\r\n      case \"\\u0030\":\r\n        res += \"\\u06F0\";\r\n        break;\r\n      case \"\\u0031\":\r\n        res += \"\\u06F1\";\r\n        break;\r\n      case \"\\u0032\":\r\n        res += \"\\u06F2\";\r\n        break;\r\n      case \"\\u0033\":\r\n        res += \"\\u06F3\";\r\n        break;\r\n      case \"\\u0034\":\r\n        res += \"\\u06F4\";\r\n        break;\r\n      case \"\\u0035\":\r\n        res += \"\\u06F5\";\r\n        break;\r\n      case \"\\u0036\":\r\n        res += \"\\u06F6\";\r\n        break;\r\n      case \"\\u0037\":\r\n        res += \"\\u06F7\";\r\n        break;\r\n      case \"\\u0038\":\r\n        res += \"\\u06F8\";\r\n        break;\r\n      case \"\\u0039\":\r\n        res += \"\\u06F9\";\r\n        break;\r\n      default:\r\n        res += number[i];\r\n    }\r\n  }\r\n  return res;\r\n};\r\n//Convert Persian Numbers To English Numbers\r\nconst convertPeToEn = number => {\r\n  if (number == null || number == undefined) return \"\";\r\n  let res = \"\";\r\n  for (let i = 0; i < number.length; i++) {\r\n    switch (number[i]) {\r\n      case \"\\u06F0\":\r\n        res += \"\\u0030\";\r\n        break;\r\n      case \"\\u06F1\":\r\n        res += \"\\u0031\";\r\n        break;\r\n      case \"\\u06F2\":\r\n        res += \"\\u0032\";\r\n        break;\r\n      case \"\\u06F3\":\r\n        res += \"\\u0033\";\r\n        break;\r\n      case \"\\u06F4\":\r\n        res += \"\\u0034\";\r\n        break;\r\n      case \"\\u06F5\":\r\n        res += \"\\u0035\";\r\n        break;\r\n      case \"\\u06F6\":\r\n        res += \"\\u0036\";\r\n        break;\r\n      case \"\\u06F7\":\r\n        res += \"\\u0037\";\r\n        break;\r\n      case \"\\u06F8\":\r\n        res += \"\\u0038\";\r\n        break;\r\n      case \"\\u06F9\":\r\n        res += \"\\u0039\";\r\n        break;\r\n      default:\r\n        res += number[i];\r\n    }\r\n  }\r\n  return res;\r\n};\r\n\r\nmodule.exports = exports = {\r\n  convert,\r\n  sliceNumber,\r\n  convertEnToPe,\r\n  convertPeToEn\r\n};\r\n"]}
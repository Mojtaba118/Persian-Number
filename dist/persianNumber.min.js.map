{"version":3,"sources":["../src/persianNumber.js"],"names":[],"mappings":"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","file":"persianNumber.min.js","sourcesContent":["const PN = new (class {\r\n  oneDigit = [\"صفر\", \"یک\", \"دو\", \"سه\", \"چهار\", \"پنج\", \"شش\", \"هفت\", \"هشت\", \"نه\"];\r\n  twoDigits = {\r\n    10: \"ده\",\r\n    11: \"یازده\",\r\n    12: \"دوازده\",\r\n    13: \"سیزده\",\r\n    14: \"چهارده\",\r\n    15: \"پانزده\",\r\n    16: \"شانزده\",\r\n    17: \"هفده\",\r\n    18: \"هجده\",\r\n    19: \"نوزده\",\r\n    20: \"بیست\",\r\n    30: \"سی\",\r\n    40: \"چهل\",\r\n    50: \"پنجاه\",\r\n    60: \"شصت\",\r\n    70: \"هفتاد\",\r\n    80: \"هشتاد\",\r\n    90: \"نود\"\r\n  };\r\n  threeDigits = {\r\n    100: \"صد\",\r\n    200: \"دویست\",\r\n    300: \"سیصد\",\r\n    400: \"چهارصد\",\r\n    500: \"پانصد\",\r\n    600: \"شش صد\",\r\n    700: \"هفت صد\",\r\n    800: \"هشت صد\",\r\n    900: \"نه صد\"\r\n  };\r\n\r\n  types = [\"تلیارد\", \"میلیارد\", \"میلیون\", \"هزار\", \"\"];\r\n  decimalTypes = [\"دهم\", \"صدم\", \"هزارم\", \"ده هزارم\"];\r\n  numbers = [];\r\n  decimals = [];\r\n  //Convert Number To Words\r\n  convert = number => {\r\n    let negative = \"\";\r\n    let decNumber = \"\";\r\n    let decimal = \"\";\r\n    let percent = \"\";\r\n\r\n    if (this.isPercent(number)) {\r\n      number = number.replace(\"%\", \"\");\r\n      percent = \" درصد\";\r\n    }\r\n\r\n    number = this.getString(number);\r\n    if (number == \"\") return \"\";\r\n    this.sliceNumber(number);\r\n    if (this.isNegative(number)) negative = \"منفی \";\r\n    number = number.replace(\"-\", \"\");\r\n\r\n    if (this.isDecimal(number)) {\r\n      let index = number.indexOf(\".\");\r\n      let decNumberStr = \"\";\r\n\r\n      decNumber = number.substr(index + 1, number.length);\r\n      number = number.substr(0, index);\r\n      decNumberStr = parseInt(decNumber).toString();\r\n\r\n      if (decNumberStr.length === 1 && decNumberStr != \"0\") {\r\n        decimal += this.oneDigit[decNumberStr] + \" \";\r\n        decimal += this.decimalTypes[decNumber.length - 1];\r\n      } else {\r\n        decimal = this.calculateDigits(this.decimals);\r\n        decimal += \" \" + this.decimalTypes[decNumber.length - 1];\r\n      }\r\n    }\r\n\r\n    if (number.length === 1) {\r\n      if (!decimal) {\r\n        return negative + this.oneDigit[number] + percent;\r\n      }\r\n\r\n      if (number == \"0\") {\r\n        return negative + decimal + percent;\r\n      }\r\n\r\n      return negative + this.oneDigit[number] + \" ممیز \" + decimal + percent;\r\n    }\r\n\r\n    if (!decimal) {\r\n      return negative + this.calculateDigits(this.numbers) + percent;\r\n    }\r\n\r\n    return (\r\n      negative +\r\n      this.calculateDigits(this.numbers) +\r\n      \" ممیز \" +\r\n      decimal +\r\n      percent\r\n    );\r\n  };\r\n\r\n  //split number 3 by 3 with a separator (123456789.3025=>123,456,789.3,025) Do Not Give It Persian Numbers\r\n  sliceNumber = (number, separator = \",\") => {\r\n    let percent = \"\";\r\n    let neg = \"\";\r\n    let dNum = \"\";\r\n    let n = \"\";\r\n    let d = \"\";\r\n\r\n    if (this.isPercent(number)) {\r\n      number = number.replace(\"%\", \"\");\r\n      percent = \"%\";\r\n    }\r\n\r\n    number = this.getString(number);\r\n\r\n    if (number == \"\") return \"\";\r\n    if (this.isNegative(number)) neg = \"-\";\r\n\r\n    number = number.replace(\"-\", \"\");\r\n\r\n    if (this.isDecimal(number)) {\r\n      let index = number.indexOf(\".\");\r\n      dNum = number.substr(index + 1, number.length);\r\n      number = number.substr(0, index);\r\n    }\r\n\r\n    n = this.putSeparator(number, 3, separator);\r\n    this.numbers = n.split(separator);\r\n\r\n    if (!dNum) return neg + n + percent;\r\n\r\n    d = this.putSeparator(dNum, 3, separator);\r\n    this.decimals = d.split(separator);\r\n\r\n    return neg + n + \".\" + d + percent;\r\n  };\r\n\r\n  //Puts a separator between the chunks of the given numString.\r\n  putSeparator = (numString, chunkSize, separator = \",\") => {\r\n    if (typeof numString !== \"string\") return \"\";\r\n    if (numString.length < 4) return numString;\r\n\r\n    let result = \"\";\r\n    for (let i = numString.length - 1, counter = 0; i >= 0; i--) {\r\n      if (counter == 3) {\r\n        result += separator;\r\n        counter = 0;\r\n      }\r\n      result += numString[i];\r\n      counter++;\r\n    }\r\n\r\n    result = result\r\n      .split(\"\")\r\n      .reverse()\r\n      .join(\"\");\r\n    return result;\r\n  };\r\n\r\n  //Processing on Digits of A Number\r\n  calculateDigits = arrNum => {\r\n    let result = \"\";\r\n    for (let i = 0; i < arrNum.length; i++) {\r\n      let parsedNum = parseInt(arrNum[i]);\r\n      let number = parsedNum;\r\n      let sadgan = Math.floor(number / 100) * 100;\r\n      number = number % 100;\r\n      let dahgan = Math.floor(number / 10) * 10;\r\n      let yekan = number % 10;\r\n      result += i !== 0 && parsedNum ? \" و \" : \"\";\r\n\r\n      result +=\r\n        this.getPersian(sadgan, dahgan, yekan, i, arrNum) +\r\n        \" \" +\r\n        this.getType(i, arrNum);\r\n    }\r\n\r\n    return result.trim();\r\n  };\r\n\r\n  //Main Process That Turn a Number Into a String(122=>100+20+2)\r\n  getPersian = (sadgan, dahgan, yekan, index, numbers) => {\r\n    let flag = false;\r\n    let result = \"\";\r\n    let dahganPlusYekan = dahgan + yekan;\r\n\r\n    if (this.threeDigits[sadgan]) {\r\n      result +=\r\n        yekan > 0 || dahgan > 0\r\n          ? this.threeDigits[sadgan] + \" و \"\r\n          : this.threeDigits[sadgan];\r\n    }\r\n\r\n    if (this.twoDigits[dahganPlusYekan]) {\r\n      result += this.twoDigits[dahganPlusYekan] + \" \";\r\n      return result;\r\n    }\r\n\r\n    if (this.twoDigits[dahgan]) {\r\n      result += this.twoDigits[dahgan] + \" و \";\r\n    }\r\n\r\n    if (\r\n      numbers.length === 2 &&\r\n      index === 0 &&\r\n      yekan === 1 &&\r\n      dahgan === 0 &&\r\n      sadgan === 0\r\n    ) {\r\n      return result;\r\n    }\r\n\r\n    if (\r\n      numbers.length > 2 &&\r\n      index === numbers.length - 2 &&\r\n      yekan === 1 &&\r\n      dahgan === 0 &&\r\n      sadgan === 0\r\n    ) {\r\n      return result;\r\n    }\r\n\r\n    if (yekan > 0) result += this.oneDigit[yekan] + \" \";\r\n\r\n    return result;\r\n  };\r\n\r\n  //getting The Type Of Each Number (Billion, Million,...)\r\n  getType = (i, numbers) => {\r\n    let parsedNum = parseInt(numbers[i]);\r\n    if (isNaN(parsedNum)) return \"\";\r\n    if (!parsedNum) return \"\";\r\n    let length = numbers.length - i;\r\n    let index = this.types.length - length;\r\n    return this.types[index];\r\n  };\r\n\r\n  //Calculate if number:String is Negative Or Not\r\n  isNegative = number => {\r\n    number = this.getString(number);\r\n    if (!number) return false;\r\n    if (number[0] != \"-\") return false;\r\n    number = number.replace(\"-\", \"\");\r\n    return number != \"0\";\r\n  };\r\n\r\n  //Calculate if number:String has '%' as Percent\r\n  isPercent = string => {\r\n    if (typeof string !== \"string\") return false;\r\n    let index = string.indexOf(\"%\");\r\n    let lIndex = string.lastIndexOf(\"%\");\r\n    if (index != lIndex) return false;\r\n    return index > 0;\r\n  };\r\n\r\n  //is number:String:Number is a Valid Number? if type is Number turn it to String And Return it\r\n  getString = number => {\r\n    if (number === undefined) return \"\";\r\n    if (number === null) return \"\";\r\n    if (isNaN(number)) return \"\";\r\n    if (typeof number === \"number\") return number.toString();\r\n    return number.trim();\r\n  };\r\n\r\n  //Calculate if number:String has Decimal Point Or Not\r\n  isDecimal = number => {\r\n    number = this.getString(number);\r\n    if (number == \"\") return false;\r\n    let index = number.indexOf(\".\");\r\n    let lIndex = number.lastIndexOf(\".\");\r\n    if (index != lIndex) return false;\r\n    return index > 0;\r\n  };\r\n  //Convert English Numbers To Persian Numbers\r\n  convertEnToPe = number => {\r\n    if (number == null || number == undefined) return \"\";\r\n    if (typeof number == \"number\") number = number.toString();\r\n    let res = \"\";\r\n    for (let i = 0; i < number.length; i++) {\r\n      if (number[i] === \"\\u0030\") res += \"\\u06F0\";\r\n      else if (number[i] === \"\\u0031\") res += \"\\u06F1\";\r\n      else if (number[i] === \"\\u0032\") res += \"\\u06F2\";\r\n      else if (number[i] === \"\\u0033\") res += \"\\u06F3\";\r\n      else if (number[i] === \"\\u0034\") res += \"\\u06F4\";\r\n      else if (number[i] === \"\\u0035\") res += \"\\u06F5\";\r\n      else if (number[i] === \"\\u0036\") res += \"\\u06F6\";\r\n      else if (number[i] === \"\\u0037\") res += \"\\u06F7\";\r\n      else if (number[i] === \"\\u0038\") res += \"\\u06F8\";\r\n      else if (number[i] === \"\\u0039\") res += \"\\u06F9\";\r\n      else res += number[i];\r\n    }\r\n    return res;\r\n  };\r\n  //Convert Persian Numbers To English Numbers\r\n  convertPeToEn = number => {\r\n    if (number == null || number == undefined) return \"\";\r\n    let res = \"\";\r\n    for (let i = 0; i < number.length; i++) {\r\n      if (number[i] === \"\\u06F0\") res += \"\\u0030\";\r\n      else if (number[i] === \"\\u06F1\") res += \"\\u0031\";\r\n      else if (number[i] === \"\\u06F2\") res += \"\\u0032\";\r\n      else if (number[i] === \"\\u06F3\") res += \"\\u0033\";\r\n      else if (number[i] === \"\\u06F4\") res += \"\\u0034\";\r\n      else if (number[i] === \"\\u06F5\") res += \"\\u0035\";\r\n      else if (number[i] === \"\\u06F6\") res += \"\\u0036\";\r\n      else if (number[i] === \"\\u06F7\") res += \"\\u0037\";\r\n      else if (number[i] === \"\\u06F8\") res += \"\\u0038\";\r\n      else if (number[i] === \"\\u06F9\") res += \"\\u0039\";\r\n      else res += number[i];\r\n    }\r\n    return res;\r\n  };\r\n})();\r\n\r\nmodule.exports = exports = PN;\r\n"]}